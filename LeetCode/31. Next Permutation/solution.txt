/*
题面
A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100

解题思路

2, 5, 4, 3, 2, 1

特殊情况：初始数组就是倒序排列的组合，那么直接输出正序排列的组合

1. 从右往左找到第一个比右边元素小的元素位置 flag
2. 从右往左找到第一个比flag所在元素大的元素位置flag2，交换flag与flag2的元素内容，变成 3, 5, 4, 2, 2, 1
3. 将flag右侧所有元素倒序排列, 变成 3, 1, 2, 2, 4, 5
*/
void nextPermutation(int* nums, int numsSize){
    int flag = -1; // the replace place
    for(int i=numsSize-2; i>=0; i--)
    {
        if(nums[i] >= nums[i+1]) continue;
        else
        {
            flag = i;
            break;
        }
    }
    if(flag == -1)
    {
        int Times = (numsSize/2);
        for(int i=0;i<Times;i++)
        {
            int t = nums[i];
            nums[i] = nums[numsSize-i-1];
            nums[numsSize-i-1] = t;
        }
        return ;
    }
    
    int flag2 = -1; // the replace 2
    for(int i=numsSize-1; i>=0; i--)
    {
        if(nums[i] > nums[flag])
        {
            flag2 = i;
            int t = nums[flag];
            nums[flag] = nums[i];
            nums[i] = t;
            break;
        }
    }
    
   int Times = (numsSize-flag-1)/2;
    for(int i=0;i<Times;i++)
    {
        int t = nums[i+flag+1];
        nums[i+flag+1] = nums[numsSize-i-1];
        nums[numsSize-i-1] = t;
    }

    return ;
}